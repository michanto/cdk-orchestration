{
 "Resources": {
  "GreetingReverseServiceRole4C8C16C6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "GreetingReverse971E718C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reverseGreeting = void 0;\nconst logger = process.env.LogLevel ? console : undefined;\nfunction log(message) {\nlogger?.log(JSON.stringify(message));\n}\n\nasync function reverseGreeting(event, context) {\nlog({ Event: event });\nlog({ Context: context });\nlet isCustomResource = event.ResourceProperties != undefined;\nif (isCustomResource && 'EncodedProperties' in event.ResourceProperties) {\nevent.ResourceProperties = {\n...event.ResourceProperties,\n...JSON.parse(Buffer.from(event.ResourceProperties.EncodedProperties, 'base64').toString('utf8')),\n};\nlog({ DecodedEvent: JSON.stringify(event) });\n}\nlet greeting = event.Greeting\n?? event.ResourceProperties.Greeting\n?? 'Hello, world';\nlet result = greeting.split('').reverse().join('');\nreturn isCustomResource ? Promise.resolve({\nData: { Greeting: result },\n}) : Promise.resolve({\nGreeting: result,\n});\n}\nexports.reverseGreeting = reverseGreeting;"
    },
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.reverseGreeting",
    "Role": {
     "Fn::GetAtt": [
      "GreetingReverseServiceRole4C8C16C6",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "GreetingReverseServiceRole4C8C16C6"
   ]
  },
  "GreetingLambdaTask1569D06A": {
   "Type": "Custom::LambdaTask",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LambdaTaskResourcesLambdaTaskProviderframeworkonEventF2CD8AD5",
      "Arn"
     ]
    },
    "EncodedProperties": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "{\"Create\":{\"service\":\"Lambda\",\"action\":\"invoke\",\"parameters\":{\"FunctionName\":\"",
        {
         "Ref": "GreetingReverse971E718C"
        },
        "\",\"Payload\":\"{\\\"Greeting\\\":\\\"Hello, world.\\\"}\"},\"physicalResourceId\":{\"id\":\"Invoke",
        {
         "Ref": "GreetingReverse971E718C"
        },
        "-64559cce0e0f36293b0927ac50c7f942\"}},\"Update\":{\"service\":\"Lambda\",\"action\":\"invoke\",\"parameters\":{\"FunctionName\":\"",
        {
         "Ref": "GreetingReverse971E718C"
        },
        "\",\"Payload\":\"{\\\"Greeting\\\":\\\"Hello, world.\\\"}\"},\"physicalResourceId\":{\"id\":\"Invoke",
        {
         "Ref": "GreetingReverse971E718C"
        },
        "-64559cce0e0f36293b0927ac50c7f942\"}},\"ResponseBufferField\":\"Payload\",\"RequestedOutputs\":[\"Greeting\"]}"
       ]
      ]
     }
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "LambdaTaskResourcesLambdaTaskRoleBA629521": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaRole"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "lambda:Invoke*",
         "Effect": "Allow",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "CFRPolicy"
     }
    ]
   }
  },
  "LambdaTaskResourcesLambdaTaskOnEventAE4BACF4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "62d103595cdf02d7b2364a1c874cf227544265165cf75e19627ce8bc7a988dfd.zip"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaTaskResourcesLambdaTaskRoleBA629521",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Timeout": 60
   },
   "DependsOn": [
    "LambdaTaskResourcesLambdaTaskRoleBA629521"
   ]
  },
  "LambdaTaskResourcesLambdaTaskProviderframeworkonEventServiceRole04C5F110": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "LambdaTaskResourcesLambdaTaskProviderframeworkonEventServiceRoleDefaultPolicy28D4F0E8": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LambdaTaskResourcesLambdaTaskOnEventAE4BACF4",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "LambdaTaskResourcesLambdaTaskOnEventAE4BACF4",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaTaskResourcesLambdaTaskProviderframeworkonEventServiceRoleDefaultPolicy28D4F0E8",
    "Roles": [
     {
      "Ref": "LambdaTaskResourcesLambdaTaskProviderframeworkonEventServiceRole04C5F110"
     }
    ]
   }
  },
  "LambdaTaskResourcesLambdaTaskProviderframeworkonEventF2CD8AD5": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip"
    },
    "Description": "AWS CDK resource provider framework - onEvent (LambdaTaskInteg/LambdaTask::Resources/LambdaTaskProvider)",
    "Environment": {
     "Variables": {
      "USER_ON_EVENT_FUNCTION_ARN": {
       "Fn::GetAtt": [
        "LambdaTaskResourcesLambdaTaskOnEventAE4BACF4",
        "Arn"
       ]
      }
     }
    },
    "Handler": "framework.onEvent",
    "Role": {
     "Fn::GetAtt": [
      "LambdaTaskResourcesLambdaTaskProviderframeworkonEventServiceRole04C5F110",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 900
   },
   "DependsOn": [
    "LambdaTaskResourcesLambdaTaskProviderframeworkonEventServiceRoleDefaultPolicy28D4F0E8",
    "LambdaTaskResourcesLambdaTaskProviderframeworkonEventServiceRole04C5F110"
   ]
  }
 },
 "Outputs": {
  "AnOutput": {
   "Value": {
    "Fn::GetAtt": [
     "GreetingLambdaTask1569D06A",
     "Greeting"
    ]
   },
   "Export": {
    "Name": "LambdaTaskGreetingExport"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}